# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sceg-qd4Nin90sMEZenQw9begOA67tHn
"""

import pandas as pd

# Load Wine Quality Dataset
wine_data_path = "/content/Wine-quality/winequality-white.csv"
wine_data = pd.read_csv(wine_data_path, delimiter=';')

# # Display the first few rows of the dataset
# print(wine_data.head())

# # Check for missing values
# print(wine_data.isnull().sum())

# # Summary statistics
# print(wine_data.describe())

# Handle missing values (if any)
# For example, we can fill missing values with the mean of the column
wine_data.fillna(wine_data.mean(), inplace=True)

# # Verify that there are no more missing values
# print(wine_data.isnull().sum())

# # Optionally, display the first few rows to verify the data
# print(wine_data.head())


from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Separate features and target
X = wine_data.drop('quality', axis=1)
y = wine_data['quality']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# # Verify the shapes of the training and testing sets
# print(f'X_train shape: {X_train.shape}')
# print(f'X_test shape: {X_test.shape}')
# print(f'y_train shape: {y_train.shape}')
# print(f'y_test shape: {y_test.shape}')


from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Train SVM with linear kernel
svm_linear = SVC(kernel='linear')
svm_linear.fit(X_train, y_train)

# Predict on the test set
y_pred_linear = svm_linear.predict(X_test)

# Evaluate the model
accuracy_linear = accuracy_score(y_test, y_pred_linear)
print(f'Linear Kernel SVM Accuracy: {accuracy_linear}')
print('Classification Report for Linear Kernel SVM:')
print(classification_report(y_test, y_pred_linear))


# Train SVM with RBF kernel
svm_rbf = SVC(kernel='rbf')
svm_rbf.fit(X_train, y_train)

# Predict on the test set
y_pred_rbf = svm_rbf.predict(X_test)

# Evaluate the model
accuracy_rbf = accuracy_score(y_test, y_pred_rbf)
# print(f'RBF Kernel SVM Accuracy: {accuracy_rbf}')
# print('Classification Report for RBF Kernel SVM:')
# print(classification_report(y_test, y_pred_rbf))


from sklearn.model_selection import validation_curve
import numpy as np
import matplotlib.pyplot as plt

# Define the range for the parameter `C`
param_range = np.logspace(-3, 3, 7)

# Calculate validation curves
train_scores, test_scores = validation_curve(
    SVC(kernel='rbf'), X_train, y_train, param_name='C', param_range=param_range, cv=3, scoring='accuracy', n_jobs=-1
)

# Calculate mean and standard deviation for training and test scores
train_scores_mean = np.mean(train_scores, axis=1)
train_scores_std = np.std(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)
test_scores_std = np.std(test_scores, axis=1)

# Plot validation curve
plt.figure()
plt.title("Validation Curve with SVM (RBF kernel) for C")
plt.xlabel("C")
plt.ylabel("Accuracy")
plt.ylim(0.0, 1.1)
plt.semilogx(param_range, train_scores_mean, label="Training score", color="darkorange", lw=2)
plt.fill_between(param_range, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.2, color="darkorange", lw=2)
plt.semilogx(param_range, test_scores_mean, label="Cross-validation score", color="navy", lw=2)
plt.fill_between(param_range, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.2, color="navy", lw=2)
plt.legend(loc="best")
plt.show()

# Define the range for the parameter `gamma`
param_range = np.logspace(-3, 3, 7)

# Calculate validation curves
train_scores, test_scores = validation_curve(
    SVC(kernel='rbf'), X_train, y_train, param_name='gamma', param_range=param_range, cv=3, scoring='accuracy', n_jobs=-1
)

# Calculate mean and standard deviation for training and test scores
train_scores_mean = np.mean(train_scores, axis=1)
train_scores_std = np.std(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)
test_scores_std = np.std(test_scores, axis=1)

# Plot validation curve
plt.figure()
plt.title("Validation Curve with SVM (RBF kernel) for gamma")
plt.xlabel("gamma")
plt.ylabel("Accuracy")
plt.ylim(0.0, 1.1)
plt.semilogx(param_range, train_scores_mean, label="Training score", color="darkorange", lw=2)
plt.fill_between(param_range, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.2, color="darkorange", lw=2)
plt.semilogx(param_range, test_scores_mean, label="Cross-validation score", color="navy", lw=2)
plt.fill_between(param_range, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.2, color="navy", lw=2)
plt.legend(loc="best")
plt.show()


from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC

# Define the parameter grid
param_grid = {
    'C': np.logspace(-3, 3, 7),
    'gamma': np.logspace(-3, 3, 7)
}

# Create a SVC model
svc = SVC(kernel='rbf')

# Create a GridSearchCV object
grid_search = GridSearchCV(estimator=svc, param_grid=param_grid, cv=3, n_jobs=-1, scoring='accuracy')

# Fit the grid search to the data
grid_search.fit(X_train, y_train)

# Get the best parameters
best_params = grid_search.best_params_
print(f"Best parameters found: {best_params}")

# Get the best estimator
best_model = grid_search.best_estimator_

# Evaluate the best model on the test set
test_accuracy = best_model.score(X_test, y_test)
print(f"Test accuracy of the best model: {test_accuracy}")


from sklearn.model_selection import learning_curve

# Create the best SVM model with RBF kernel
best_svm_rbf = SVC(kernel='rbf', C=best_params['C'], gamma=best_params['gamma'])

# Generate learning curve data
train_sizes, train_scores, test_scores = learning_curve(best_svm_rbf, X_train, y_train, cv=3, n_jobs=-1, train_sizes=np.linspace(0.1, 1.0, 10), scoring='accuracy')

# Calculate mean and standard deviation for training and test scores
train_scores_mean = np.mean(train_scores, axis=1)
train_scores_std = np.std(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)
test_scores_std = np.std(test_scores, axis=1)

# Plot learning curve
plt.figure()
plt.title("Learning Curve with Best SVM (RBF kernel)")
plt.xlabel("Training examples")
plt.ylabel("Accuracy")
plt.ylim(0.0, 1.1)
plt.grid()

plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color="r")
plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color="g")
plt.plot(train_sizes, train_scores_mean, 'o-', color="r", label="Training score")
plt.plot(train_sizes, test_scores_mean, 'o-', color="g", label="Cross-validation score")

plt.legend(loc="best")
plt.show()

from sklearn.model_selection import learning_curve

# Define suboptimal parameters for the SVM with RBF kernel
suboptimal_params = {'C': 0.01, 'gamma': 0.001}

# Create the suboptimal SVM model with RBF kernel
suboptimal_svm_rbf = SVC(kernel='rbf', C=suboptimal_params['C'], gamma=suboptimal_params['gamma'])

# Generate learning curve data for the suboptimal model
train_sizes_sub, train_scores_sub, test_scores_sub = learning_curve(suboptimal_svm_rbf, X_train, y_train, cv=3, n_jobs=-1, train_sizes=np.linspace(0.1, 1.0, 10), scoring='accuracy')

# Calculate mean and standard deviation for training and test scores for the suboptimal model
train_scores_sub_mean = np.mean(train_scores_sub, axis=1)
train_scores_sub_std = np.std(train_scores_sub, axis=1)
test_scores_sub_mean = np.mean(test_scores_sub, axis=1)
test_scores_sub_std = np.std(test_scores_sub, axis=1)

# Plot learning curve for the suboptimal model
plt.figure()
plt.title("Learning Curve with Suboptimal SVM (RBF kernel)")
plt.xlabel("Training examples")
plt.ylabel("Accuracy")
plt.ylim(0.0, 1.1)
plt.grid()

plt.fill_between(train_sizes_sub, train_scores_sub_mean - train_scores_sub_std, train_scores_sub_mean + train_scores_sub_std, alpha=0.1, color="r")
plt.fill_between(train_sizes_sub, test_scores_sub_mean - test_scores_sub_std, test_scores_sub_mean + test_scores_sub_std, alpha=0.1, color="g")
plt.plot(train_sizes_sub, train_scores_sub_mean, 'o-', color="r", label="Training score")
plt.plot(train_sizes_sub, test_scores_sub_mean, 'o-', color="g", label="Cross-validation score")

plt.legend(loc="best")
plt.show()

# Print the training and validation times
import time
start_time = time.time()
suboptimal_svm_rbf.fit(X_train, y_train)
suboptimal_training_time = time.time() - start_time

start_time = time.time()
suboptimal_svm_rbf.predict(X_test)
suboptimal_validation_time = time.time() - start_time

print(f"Suboptimal model training time: {suboptimal_training_time:.2f} seconds")
print(f"Suboptimal model validation time: {suboptimal_validation_time:.2f} seconds")

import pandas as pd

# Define column names based on the dataset documentation
column_names = ['Class', 'Age', 'Menopause', 'Tumor Size', 'Inv Nodes', 'Node Caps',
                'Deg Malig', 'Breast', 'Breast Quad', 'Irradiat']

# Load Breast Cancer Dataset
breast_cancer_data_path = "/content/breast/breast-cancer.data"
breast_cancer_data = pd.read_csv(breast_cancer_data_path, header=None, names=column_names)

# # Display the first few rows of the dataset
# print(breast_cancer_data.head())

from sklearn.model_selection import validation_curve
import matplotlib.pyplot as plt
import numpy as np

# Define the range for the 'C' parameter
param_range = np.logspace(-3, 3, 7)

# Compute the validation curve
train_scores, test_scores = validation_curve(
    SVC(kernel='rbf', gamma='scale'), X_train, y_train,
    param_name="C", param_range=param_range,
    scoring="accuracy", n_jobs=-1, cv=5)

# Calculate the mean and standard deviation for training and validation scores
train_mean = np.mean(train_scores, axis=1)
train_std = np.std(train_scores, axis=1)
test_mean = np.mean(test_scores, axis=1)
test_std = np.std(test_scores, axis=1)

# Plot the validation curve
plt.figure(figsize=(8, 6))
plt.plot(param_range, train_mean, label="Training score", color="r")
plt.plot(param_range, test_mean, label="Cross-validation score", color="g")
plt.fill_between(param_range, train_mean - train_std, train_mean + train_std, color="r", alpha=0.2)
plt.fill_between(param_range, test_mean - test_std, test_mean + test_std, color="g", alpha=0.2)
plt.title("Validation Curve with SVM (RBF kernel) for C")
plt.xlabel("C")
plt.ylabel("Accuracy")
plt.xscale('log')
plt.legend(loc="best")
plt.show()

# Define the range for the 'gamma' parameter
param_range = np.logspace(-3, 3, 7)

# Compute the validation curve
train_scores, test_scores = validation_curve(
    SVC(kernel='rbf', C=1), X_train, y_train,
    param_name="gamma", param_range=param_range,
    scoring="accuracy", n_jobs=-1, cv=5)

# Calculate the mean and standard deviation for training and validation scores
train_mean = np.mean(train_scores, axis=1)
train_std = np.std(train_scores, axis=1)
test_mean = np.mean(test_scores, axis=1)
test_std = np.std(test_scores, axis=1)

# Plot the validation curve
plt.figure(figsize=(8, 6))
plt.plot(param_range, train_mean, label="Training score", color="r")
plt.plot(param_range, test_mean, label="Cross-validation score", color="g")
plt.fill_between(param_range, train_mean - train_std, train_mean + train_std, color="r", alpha=0.2)
plt.fill_between(param_range, test_mean - test_std, test_mean + test_std, color="g", alpha=0.2)
plt.title("Validation Curve with SVM (RBF kernel) for gamma")
plt.xlabel("gamma")
plt.ylabel("Accuracy")
plt.xscale('log')
plt.legend(loc="best")
plt.show()

from sklearn.model_selection import GridSearchCV

# Define the parameter grid
param_grid = {
    'C': np.logspace(-3, 3, 7),
    'gamma': np.logspace(-3, 3, 7)
}

# Create a SVM classifier with RBF kernel
svm_rbf = SVC(kernel='rbf')

# Create a GridSearchCV object
grid_search = GridSearchCV(svm_rbf, param_grid, cv=5, scoring='accuracy', n_jobs=-1)

# Fit the grid search to the data
grid_search.fit(X_train, y_train)

# Print the best parameters and the best score
print(f"Best parameters found: {grid_search.best_params_}")
print(f"Best cross-validation accuracy: {grid_search.best_score_}")

# Evaluate the best model on the test set
best_svm = grid_search.best_estimator_
test_accuracy = best_svm.score(X_test, y_test)
print(f"Test accuracy of the best model: {test_accuracy}")

from sklearn.model_selection import learning_curve
import matplotlib.pyplot as plt

# Function to plot learning curve
def plot_learning_curve(estimator, title, X, y, cv=None, n_jobs=None, train_sizes=np.linspace(0.1, 1.0, 5)):
    plt.figure()
    plt.title(title)
    plt.xlabel("Training examples")
    plt.ylabel("Score")

    train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, scoring='accuracy')

    train_scores_mean = np.mean(train_scores, axis=1)
    train_scores_std = np.std(train_scores, axis=1)
    test_scores_mean = np.mean(test_scores, axis=1)
    test_scores_std = np.std(test_scores, axis=1)

    plt.grid()

    plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color="r")
    plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color="g")
    plt.plot(train_sizes, train_scores_mean, 'o-', color="r", label="Training score")
    plt.plot(train_sizes, test_scores_mean, 'o-', color="g", label="Cross-validation score")

    plt.legend(loc="best")
    return plt

# Create the SVM model with the best parameters
best_svm_model = SVC(kernel='rbf', C=10.0, gamma=1.0)

# Plot the learning curve
plot_learning_curve(best_svm_model, "Learning Curve with Best SVM (RBF kernel)", X_train, y_train, cv=5, n_jobs=-1)

# Show the plot
plt.show()

from sklearn.svm import SVC
from sklearn.model_selection import learning_curve
import matplotlib.pyplot as plt
import numpy as np

# Define suboptimal parameters
suboptimal_C = 0.01
suboptimal_gamma = 0.01

# Create the suboptimal SVM model
suboptimal_model = SVC(kernel='rbf', C=suboptimal_C, gamma=suboptimal_gamma)

# Calculate the learning curve
train_sizes, train_scores, test_scores = learning_curve(suboptimal_model, X_train, y_train, cv=5, n_jobs=-1,
                                                        train_sizes=np.linspace(0.1, 1.0, 10), scoring='accuracy')

# Calculate mean for training and test scores
train_scores_mean = np.mean(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)

# Plot learning curve
plt.figure()
plt.title("Learning Curve with Suboptimal SVM (RBF kernel)")
plt.xlabel("Training examples")
plt.ylabel("Score")
plt.grid()

plt.plot(train_sizes, train_scores_mean, 'o-', color="r", label="Training score")
plt.plot(train_sizes, test_scores_mean, 'o-', color="g", label="Cross-validation score")

plt.legend(loc="best")
plt.show()